#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2); // LCD 객체 생성

// 핀 설정
const int BUZZER_PIN = 9;  // 부저 핀을 9번으로 설정
const int SEGMENT_A = 10;  // 세그먼트 A
const int SEGMENT_B = 3;   // 세그먼트 B
const int SEGMENT_C = 4;   // 세그먼트 C
const int SEGMENT_D = 5;   // 세그먼트 D
const int SEGMENT_E = 6;   // 세그먼트 E
const int SEGMENT_F = 7;   // 세그먼트 F
const int SEGMENT_G = 8;   // 세그먼트 G

// 각 알파벳을 출력하는 함수
void displayNumber(char character) {
  switch (character) {
    case '0':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, LOW);
      break;
    case '1':
      digitalWrite(SEGMENT_A, LOW);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, LOW);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, LOW);
      digitalWrite(SEGMENT_G, LOW);
      break;
    case '2':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, LOW);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, LOW);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '3':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, LOW);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '4':
      digitalWrite(SEGMENT_A, LOW);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, LOW);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '5':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '6':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '7':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, LOW);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, LOW);
      digitalWrite(SEGMENT_G, LOW);
      break;
    case '8':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case '9':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, LOW);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    default:
      break; // 알 수 없는 문자는 아무것도 표시하지 않음
  }
}

// 실행 코드 //
void setup() {
  pinMode(BUZZER_PIN, OUTPUT);

  pinMode(SEGMENT_A, OUTPUT);
  pinMode(SEGMENT_B, OUTPUT);
  pinMode(SEGMENT_C, OUTPUT);
  pinMode(SEGMENT_D, OUTPUT);
  pinMode(SEGMENT_E, OUTPUT);
  pinMode(SEGMENT_F, OUTPUT);
  pinMode(SEGMENT_G, OUTPUT);

  lcd.init();
  lcd.backlight();

  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    // 세그먼트 초기화
    digitalWrite(SEGMENT_A, LOW);
    digitalWrite(SEGMENT_B, LOW);
    digitalWrite(SEGMENT_C, LOW);
    digitalWrite(SEGMENT_D, LOW);
    digitalWrite(SEGMENT_E, LOW);
    digitalWrite(SEGMENT_F, LOW);
    digitalWrite(SEGMENT_G, LOW);

    lcd.clear(); // LCD 초기화

    String modeMessage = Serial.readStringUntil('\n');

    if( modeMessage[0] == 'C' ) {
      tone(BUZZER_PIN, 493.88);
      delay(100);
      tone(BUZZER_PIN, 440.00);
      delay(100);
      tone(BUZZER_PIN, 493.88);
      delay(100);
      noTone(BUZZER_PIN);
      // 응답 전송
      Serial.println("Camera command received.");
    }else if ( modeMessage[0] == 'L' ) {
      String contentMessage = modeMessage.substring(1);
      lcd.setCursor(0, 0);
      lcd.print("20203128 KMK");
      lcd.setCursor(0, 1);
      lcd.print(contentMessage);
      // 응답 전송
      Serial.println("LCD command received with message: " + contentMessage);
    } else if ( modeMessage[0] == 'S' ) {
      displayNumber(modeMessage[1]);
      //응답 전송
      Serial.println("Segment command received with number: " + modeMessage[1]);
    }
  }
}
