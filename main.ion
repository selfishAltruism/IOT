#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2); // LCD 객체 생성

// 핀 설정
const int BUZZER_PIN = 9;  // 부저 핀을 9번으로 설정
const int BUTTON_PIN = 2;  // 버튼 핀을 2번으로 설정

const int SEGMENT_A = 10; // 세그먼트 A
const int SEGMENT_B = 3;  // 세그먼트 B
const int SEGMENT_C = 4;  // 세그먼트 C
const int SEGMENT_D = 5;  // 세그먼트 D
const int SEGMENT_E = 6;  // 세그먼트 E
const int SEGMENT_F = 7;  // 세그먼트 F
const int SEGMENT_G = 8;  // 세그먼트 G
const int SEGMENT_DP = 11; // 디지털 포인트

//음계 배열, 값 당 0.25 4분음표
const char* PITCH_SHEET[386] = {
  "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "C5", "C5", "C5", "C5", "B", "B", "B", "B", "A", "A", "A", "G", "G", "F", "F", "F", "F", "F", "F", "F", "F", "B3", "B3", "B3", "B3", "B3", "B3", "C", "C", "D", "D", "D", "D", "B3", "B3", "B3", "B3", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "Mute", "Mute", "Mute", "Mute", "G", "G", "G", "G", "G", "G", "F", "F", "E", "E", "E", "E", "E", "E", "E", "E", "B", "B", "B", "B", "A", "A", "A", "G", "G", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "G", "G", "A", "A", "A", "A", "B", "B", "B", "B", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "F", "F", "F", "F", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "C5", "C5", "C5", "C5", "B", "B", "B", "B", "A", "A", "A", "A", "G", "G", "G", "G", "G", "G", "G", "G", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "B", "B", "B", "B", "A", "A", "A", "A", "G", "G", "G", "G", "F", "F", "F", "F", "D", "D", "D", "C", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "Mute", "Mute", "B", "B", "B", "B", "A", "A", "G", "G", "G", "G", "G", "G", "G", "G", "Mute", "Mute", "Mute", "Mute", "G", "G", "G", "G", "F", "F", "F", "F", "F", "F", "F", "F", "G", "G", "G", "G", "A", "A", "A", "A", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "Mute", "Mute", "Mute", "Mute", "D", "D", "D", "E", "F", "F", "Mute", "Mute", "F", "F", "F", "F", "F", "F", "F", "F", "E", "E", "E", "F", "G", "G", "Mute", "Mute", "G", "G", "G", "G", "G", "G", "G", "G", "F", "F", "F", "F", "F", "F", "B", "B", "B", "B", "B", "B", "C5", "C5", "C5", "C5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "D5", "C5", "C5", "D5", "D5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "E5", "F", "F", "F", "F", "F", "F", "G", "G", "A", "A", "A", "A", "C5", "C5", "C5", "C5", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "Mute", "Mute", "Mute", "Mute"
};

// 한 음계의 지속 시간을 밀리초로 계산
// 1초에 4분음표 2회 이므로, 1초에 8개의 음계 값이 입력되어야 함
int PERIOD = 125;

// 각 음계에 해당하는 주파수 정의 (옥타브 4 기준으로 정의)
float getFrequency(const char* note) {
  if (strcmp(note, "C") == 0) return 261.63;
  else if (strcmp(note, "C5") == 0) return 523.25;
  else if (strcmp(note, "B") == 0) return 493.88;
  else if (strcmp(note, "A") == 0) return 440.00;
  else if (strcmp(note, "G") == 0) return 392.00;
  else if (strcmp(note, "F") == 0) return 349.23;
  else if (strcmp(note, "D") == 0) return 293.66;
  else if (strcmp(note, "B3") == 0) return 246.94;
  else if (strcmp(note, "D5") == 0) return 587.33;
  else if (strcmp(note, "E5") == 0) return 659.26;
  else if (strcmp(note, "E") == 0) return 329.63;
  else if (strcmp(note, "Mute") == 0) return 000.00; // Mute일 경우 주파수 없음
  return -1; // 음계가 없을 경우 오류
}

// 각 음계에 세미톤 값을 부여하는 함수
int getSemitoneValue(const char* note) {
  if (strcmp(note, "C") == 0) return 0;
  if (strcmp(note, "C#") == 0 || strcmp(note, "Db") == 0) return 1;
  if (strcmp(note, "D") == 0) return 2;
  if (strcmp(note, "D#") == 0 || strcmp(note, "Eb") == 0) return 3;
  if (strcmp(note, "E") == 0) return 4;
  if (strcmp(note, "F") == 0) return 5;
  if (strcmp(note, "F#") == 0 || strcmp(note, "Gb") == 0) return 6;
  if (strcmp(note, "G") == 0) return 7;
  if (strcmp(note, "G#") == 0 || strcmp(note, "Ab") == 0) return 8;
  if (strcmp(note, "A") == 0) return 9;
  if (strcmp(note, "A#") == 0 || strcmp(note, "Bb") == 0) return 10;
  if (strcmp(note, "B") == 0) return 11;
  if (strcmp(note, "C5") == 0) return 12;
  if (strcmp(note, "B3") == 0) return -1;
  return -999; 
}

// index를 받아 해당 음과 이전 음을 비교하는 함수
bool isSemitoneWithIndex(int index) {
  // index가 0이면 비교할 이전 음이 없으므로 false 반환
  if (index == 0) return false;

  // 이전 음과 현재 음을 세미톤 값으로 변환
  int prevSemitone = getSemitoneValue(PITCH_SHEET[index - 1]);
  int currentSemitone = getSemitoneValue(PITCH_SHEET[index]);

  // Mute 또는 잘못된 음계는 비교하지 않음
  if (prevSemitone == -100 || currentSemitone == -100 || prevSemitone == -999 || currentSemitone == -999) {
    return false;
  }

  // 두 음의 세미톤 차이가 1이면 반음
  return abs(currentSemitone - prevSemitone) == 1;
}

int totalNotes = sizeof(PITCH_SHEET) / sizeof(PITCH_SHEET[0]);

int currentNote = 0;
bool isPlaying = false;    // 현재 재생 중인지 확인
bool isPaused = false;     // 일시 정지 상태 확인

void buttonPressed() {
  if (!isPlaying) {
    isPlaying = true;    // 연주가 시작되지 않았다면 시작
  } else {
    isPaused = !isPaused; // 이미 재생 중이면 일시 정지 또는 재개
  }
}

// 세그먼트 초기화 함수
void clearSEGMENT() {
  digitalWrite(SEGMENT_A, LOW);
  digitalWrite(SEGMENT_B, LOW);
  digitalWrite(SEGMENT_C, LOW);
  digitalWrite(SEGMENT_D, LOW);
  digitalWrite(SEGMENT_E, LOW);
  digitalWrite(SEGMENT_F, LOW);
  digitalWrite(SEGMENT_G, LOW);
  digitalWrite(SEGMENT_DP, LOW); // DP 초기화
}

// 각 알파벳을 출력하는 함수
void displayCharacter(char character, bool isHalfStep) {
  clearSEGMENT(); // 세그먼트 초기화

  // DP 핀을 반음 여부에 따라 설정
  if (isHalfStep) {
    digitalWrite(SEGMENT_DP, HIGH); // DP 켜기
  } else {
    digitalWrite(SEGMENT_DP, LOW); // DP 끄기
  }

  switch (character) {
    case 'A':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, LOW);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case 'B':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case 'C':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, LOW);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, LOW);
      break;
    case 'D':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, HIGH);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, LOW);
      break;
    case 'E':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, LOW);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case 'F':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, LOW);
      digitalWrite(SEGMENT_D, LOW);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    case 'G':
      digitalWrite(SEGMENT_A, HIGH);
      digitalWrite(SEGMENT_B, LOW);
      digitalWrite(SEGMENT_C, HIGH);
      digitalWrite(SEGMENT_D, HIGH);
      digitalWrite(SEGMENT_E, HIGH);
      digitalWrite(SEGMENT_F, HIGH);
      digitalWrite(SEGMENT_G, HIGH);
      break;
    default:
      break; // 알 수 없는 문자는 아무것도 표시하지 않음
  }
}

//실행 코드//

void setup() {
  pinMode(BUZZER_PIN, OUTPUT);

  pinMode(BUTTON_PIN, INPUT_PULLUP); // 버튼 핀을 내부 풀업 저항과 함께 설정

  pinMode(SEGMENT_A, OUTPUT);
  pinMode(SEGMENT_B, OUTPUT);
  pinMode(SEGMENT_C, OUTPUT);
  pinMode(SEGMENT_D, OUTPUT);
  pinMode(SEGMENT_E, OUTPUT);
  pinMode(SEGMENT_F, OUTPUT);
  pinMode(SEGMENT_G, OUTPUT);
  pinMode(SEGMENT_DP, OUTPUT); // DP 핀 설정

  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonPressed, FALLING); // 버튼을 눌렀을 때 인터럽트 발생

  lcd.init();
  lcd.backlight();
}

void loop() {
  // 멜로디가 재생 중이며 일시 정지가 아닐 때만 실행
  if (isPlaying && !isPaused && currentNote < totalNotes) {

    // 현재 음을 재생
    tone(BUZZER_PIN, getFrequency(PITCH_SHEET[currentNote]));

    // 현재 음의 주파수를 LCD에 표시
    lcd.clear();
    lcd.print(getFrequency(PITCH_SHEET[currentNote]), 2);

    // 반음 상태와 함께 해당 문자를 7세그먼트 디스플레이에 표시
    displayCharacter(PITCH_SHEET[currentNote][0], isSemitoneWithIndex(currentNote)); // 첫 글자만 출력 및 반음 여부 전달

    delay(PERIOD); // 음 사이의 간격을 주기 위한 지연

    currentNote++; // 다음 음으로 이동

    // 노래가 끝났다면 버저를 정지하고 음을 초기화
    if (currentNote >= totalNotes) {
      noTone(BUZZER_PIN);
      currentNote = 0; // 노래의 시작으로 초기화
      isPlaying = false; // 다음 버튼 입력을 대기하기 위해 상태 초기화
      lcd.clear(); // 화면 지우기
    }
  } else if (isPaused) {
    noTone(BUZZER_PIN); // 일시 정지 시 현재 소리를 끔
  }
}
